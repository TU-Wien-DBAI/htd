/*
* File:   TreeDecompositionViaSeparatorAlgorithm.hpp
*
* Author: MILAKOVIC Andrea 
*
* Copyright 2015-2017, Michael Abseher
*    E-Mail: <abseher@dbai.tuwien.ac.at>
*
* This file is part of htd.
*
* htd is free software: you can redistribute it and/or modify it under
* the terms of the GNU General Public License as published by the Free
* Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* htd is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
* License for more details.

* You should have received a copy of the GNU General Public License
* along with htd.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef HTD_HTD_TREEDECOMPOSITIONVIASEPARATORALGORITHM_HPP
#define HTD_HTD_TREEDECOMPOSITIONVIASEPARATORALGORITHM_HPP

#include <htd/Globals.hpp>
#include <htd/ITreeDecompositionAlgorithm.hpp>
#include <htd/IPreprocessedGraph.hpp>
#include <htd/IGraphSeparatorAlgorithm.hpp>

#include <utility>

namespace htd
{
	/**
	*  Implementation of the ITreeDecompositionAlgorithm interface based on the minimal separators.
	*/
	class TreeDecompositionViaSeparatorAlgorithm : public htd::ITreeDecompositionAlgorithm
	{
	public:
		/**
		*  Constructor for a tree decomposition algorithm based on the minimal separators.
		*
		*  @param[in] manager  The management instance to which the new algorithm belongs.
		*/
		HTD_API TreeDecompositionViaSeparatorAlgorithm(const htd::LibraryInstance * const manager);

		/**
		*  Constructor for a tree decomposition algorithm based on graph separators.
		*
		*  @note When calling this method the control over the memory regions of the manipulation operations is transferred to the
		*  decomposition algorithm. Deleting a manipulation operation provided to this method outside the decomposition algorithm
		*  or assigning the same manipulation operation multiple times will lead to undefined behavior.
		*
		*  @param[in] manager                  The management instance to which the new algorithm belongs.
		*  @param[in] manipulationOperations   The manipulation operations which shall be applied globally to each decomposition generated by the algorithm.
		*/
		HTD_API TreeDecompositionViaSeparatorAlgorithm(const htd::LibraryInstance * const manager, const std::vector<htd::IDecompositionManipulationOperation *> & manipulationOperations);

		/**
		*  Copy constructor for a htd::TreeDecompositionViaSeparatorAlgorithm object.
		*
		*  @param[in] original The original htd::TreeDecompositionViaSeparatorAlgorithm object.
		*/
		HTD_API TreeDecompositionViaSeparatorAlgorithm(const htd::TreeDecompositionViaSeparatorAlgorithm & original);

		HTD_API virtual ~TreeDecompositionViaSeparatorAlgorithm();

		HTD_API htd::ITreeDecomposition * computeDecomposition(const htd::IMultiHypergraph & graph) const HTD_OVERRIDE;

		HTD_API htd::ITreeDecomposition * computeDecomposition(const htd::IMultiHypergraph & graph, const std::vector<htd::IDecompositionManipulationOperation *> & manipulationOperations) const HTD_OVERRIDE;

		/**
		*  Compute a decomposition of the given graph and apply the given manipulation operations to it. The manipulation operations are applied in the given order.
		*
		*  @param[in] graph                        The input graph to decompose.
		*  @param[in] manipulationOperationCount   The number of manipulation operations which are provided to this function.
		*
		*  @note The manipulation operations provided to this function are applied right after the manipulation operations defined globally for the algorithm.
		*
		*  @note When calling this method the control over the memory regions of the manipulation operations is transferred to the
		*  decomposition algorithm. Deleting a manipulation operation provided to this method outside the decomposition algorithm
		*  or assigning the same manipulation operation multiple times will lead to undefined behavior.
		*
		*  @return A new ITreeDecomposition object representing the decomposition of the given graph.
		*/
		HTD_API htd::ITreeDecomposition * computeDecomposition(const htd::IMultiHypergraph & graph, int manipulationOperationCount, ...) const;

		HTD_API htd::ITreeDecomposition * computeDecomposition(const htd::IMultiHypergraph & graph, const htd::IPreprocessedGraph & preprocessedGraph) const HTD_OVERRIDE;

		HTD_API htd::ITreeDecomposition * computeDecomposition(const htd::IMultiHypergraph & graph, const htd::IPreprocessedGraph & preprocessedGraph, const std::vector<htd::IDecompositionManipulationOperation *> & manipulationOperations) const HTD_OVERRIDE;

		/**
		*  Compute a decomposition of the given graph and apply the given manipulation operations to it. The manipulation operations are applied in the given order.
		*
		*  @param[in] graph                        The input graph to decompose.
		*  @param[in] preprocessedGraph            The input graph in preprocessed format.
		*  @param[in] manipulationOperationCount   The number of manipulation operations which are provided to this function.
		*
		*  @note The manipulation operations provided to this function are applied right after the manipulation operations defined globally for the algorithm.
		*
		*  @note When calling this method the control over the memory regions of the manipulation operations is transferred to the
		*  decomposition algorithm. Deleting a manipulation operation provided to this method outside the decomposition algorithm
		*  or assigning the same manipulation operation multiple times will lead to undefined behavior.
		*
		*  @return A new ITreeDecomposition object representing the decomposition of the given graph.
		*/
		HTD_API htd::ITreeDecomposition * computeDecomposition(const htd::IMultiHypergraph & graph, const htd::IPreprocessedGraph & preprocessedGraph, int manipulationOperationCount, ...) const;

		/**
		*  Set the graph separator algorithm which shall be used.
		*
		*  @param[in] algorithm    The graph separator algorithm which shall be used.
		*
		*  @note When calling this method the control over the memory region of the graph separator algorithm is transferred to the decomposition
		*  algorithm. Deleting the graph separator algorithm provided to this method outside the decomposition algorithm or assigning the same
		*  graph separator algorithm multiple times will lead to undefined behavior.
		*/

		HTD_API void setGraphSeparatorAlgorithm(htd::IGraphSeparatorAlgorithm * algorithm);
		
		HTD_API void setManipulationOperations(const std::vector<htd::IDecompositionManipulationOperation *> & manipulationOperations) HTD_OVERRIDE;

		HTD_API void addManipulationOperation(htd::IDecompositionManipulationOperation * manipulationOperation) HTD_OVERRIDE;

		HTD_API void addManipulationOperations(const std::vector<htd::IDecompositionManipulationOperation *> & manipulationOperations) HTD_OVERRIDE;

		HTD_API bool isSafelyInterruptible(void) const HTD_OVERRIDE;

		HTD_API bool isComputeInducedEdgesEnabled(void) const HTD_OVERRIDE;

		HTD_API void setComputeInducedEdgesEnabled(bool computeInducedEdgesEnabled) HTD_OVERRIDE;
	
		HTD_API const htd::LibraryInstance * managementInstance(void) const HTD_NOEXCEPT HTD_OVERRIDE;

		HTD_API void setManagementInstance(const htd::LibraryInstance * const manager) HTD_OVERRIDE;

		HTD_API TreeDecompositionViaSeparatorAlgorithm * clone(void) const HTD_OVERRIDE;

		HTD_API int getAlgorithmType(void) const;

		HTD_API void setAlgorithmType(int algorithmType);

		HTD_API int getCriteriaType(void) const;

		HTD_API void setCriteriaType(int criteriaType);

		HTD_API int getNumberOfSteps(void) const;

		HTD_API void setNumberOfSteps(int numberOfSteps);

		HTD_API int getSizeLimit(void) const;

		HTD_API void setSizeLimit(int sizeLimit);

	protected:
		/**
		*  Copy assignment operator for a tree decomposition algorithm based on graph separators.
		*
		*  @note This operator is protected to prevent assignments to an already initialized algorithm.
		*/
		TreeDecompositionViaSeparatorAlgorithm & operator=(const TreeDecompositionViaSeparatorAlgorithm &) { return *this; }

	private:
		struct Implementation;

		std::unique_ptr<Implementation> implementation_;
	};
}

#endif /* HTD_HTD_TREEDECOMPOSITIONVIASEPARATORALGORITHM_HPP */
